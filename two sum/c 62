#define HASH_SIZE 1000

struct hashNode
{
    int key;
    int value;
    struct hashNode * next;
};

typedef struct 
{
    struct hashNode ** hashtable; 
} MyHashMap;


MyHashMap* myHashMapCreate() 
{
    MyHashMap * obj = (MyHashMap *)malloc(sizeof(MyHashMap));
    obj->hashtable = (struct hashNode **)malloc(sizeof(struct hashNode *) * HASH_SIZE);
    int i=0;
    for(i=0; i<HASH_SIZE; i++)
        obj->hashtable[i] = NULL;
    return obj;        
}

int find_hash_index(int val)
{
    return (val % HASH_SIZE);
}

void myHashMapPut(MyHashMap* obj, int key, int value) 
{
    int hash_index = find_hash_index(key);    
    if(obj->hashtable[hash_index] == NULL)  //Index is empty
    {
        struct hashNode * new_node = (struct hashNode *)malloc(sizeof(struct hashNode));
        new_node->key = key;
        new_node->value = value;
        new_node->next = NULL;
        obj->hashtable[hash_index] = new_node;
        return;
    }

    struct hashNode * prev = NULL;
    struct hashNode * trav = obj->hashtable[hash_index];
    while(trav)
    {
        if(trav->key == key)
        {
            //Key already present, update the value
            trav->value = value;
            return;
        }
        else if(key > trav->key)
        {
            prev = trav;
            trav = trav->next;
        }
        else if(key < trav->key)
        {
            struct hashNode * new_node = (struct hashNode *)malloc(sizeof(struct hashNode));
            new_node->key = key;
            new_node->value = value;
            
            if(prev == NULL)
            {
                obj->hashtable[hash_index] = new_node;
                new_node->next = trav;
                return;
            }
            else
            {
                prev->next = new_node;
                new_node->next = trav;
                return;
            }
        }
    }

    //Insertion at the end
    struct hashNode * new_node = (struct hashNode *)malloc(sizeof(struct hashNode));
    new_node->key = key;
    new_node->value = value;
    new_node->next = NULL;
    prev->next = new_node;
    return;
}

int myHashMapGet(MyHashMap* obj, int key) 
{
    int hash_index = find_hash_index(key);    
    struct hashNode * trav = obj->hashtable[hash_index];
    if(trav == NULL)
        return -1;

    while(trav)
    {
        if(key > trav->key)
        {
            trav = trav->next;
        }
        else if(key == trav->key)
        {
            return trav->value;
        }
        else if(key < trav->key)
            return -1;
    }
    return -1; 
}

void myHashMapRemove(MyHashMap* obj, int key) 
{
    int hash_index = find_hash_index(key); 
    if(obj->hashtable[hash_index] == NULL)
        return;

    struct hashNode * prev = NULL;
    struct hashNode * trav = obj->hashtable[hash_index];

    while(trav)
    {
        if(trav->key == key)
        {
            struct hashNode * del_node = trav;
            
            if(prev == NULL)
            {
                trav = trav->next;
                obj->hashtable[hash_index] = trav;
            }
            else
            {
                trav = trav->next;
                prev->next = trav;
            }
            
            free(del_node);
            return;
        }
        else if(key > trav->key)
        {
            prev = trav;
            trav = trav->next;
        }
        else if(key < trav->key)
            return;
    }
    return;
}

void myHashMapFree(MyHashMap* obj) 
{
    free(obj->hashtable);
    free(obj);
}

/**
 * Your MyHashMap struct will be instantiated and called as such:
 * MyHashMap* obj = myHashMapCreate();
 * myHashMapPut(obj, key, value);
 
 * int param_2 = myHashMapGet(obj, key);
 
 * myHashMapRemove(obj, key);
 
 * myHashMapFree(obj);
*/
