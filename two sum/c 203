class Solution {
public:
    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& patience) {
        int n = patience.size();
        vector<vector<int>> adj(n);
        for (const auto& edge: edges){
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        
        vector<int> dist(n, INT_MAX);
        dist[0] = 0;
        queue<int> q;
        q.push(0);
        
        while (!q.empty()){
            int u = q.front();
            q.pop();
            for (const auto& v: adj[u]){
                if (dist[v] > dist[u] + 1){
                    dist[v] = dist[u] + 1;
                    q.push(v);
                }
            }
        }
        
        int ans = INT_MIN;
        for (int i = 1; i < n; ++i){
            int cur_ans = dist[i] * 2 + 1;
            if (patience[i] < dist[i] * 2){
                int lastMsgTime = ((dist[i] * 2) / patience[i]) * patience[i];
                // we don't send message when node get first response.
                if (dist[i] * 2 % patience[i] == 0) lastMsgTime -= patience[i];
                cur_ans += lastMsgTime;
            }
            ans = max(ans, cur_ans);
        }
        
        return ans;
    }
};
