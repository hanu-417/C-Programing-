/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** commonChars(char ** words, int wordsSize, int* returnSize)
{
    int refLetters[26] = {0};
    int evalLetters[26] = {0};
    int i = 0, c = 0;
    for (i = 0; i < wordsSize; i++)
    {
        int j = 0;
        while (words[i][j] != '\0' && i == 0) // For First word
        {
            refLetters[words[i][j] - 'a']++; // Save count of letters to reference.
            j++;
        }

        j = 0;
        while (words[i][j] != '\0' && i != 0) // All other words
        {
            evalLetters[words[i][j] - 'a']++;// Save count of letters to eval.
            j++;
        }

        c = 0;
        for (j = 0; j < 26; j++) 
        {
            if (evalLetters[j] < refLetters[j] && i > 0) {
                refLetters[j] = evalLetters[j]; // reference will take smaller value.
            }
            if (refLetters[j] > 0){
                c += refLetters[j]; // count letters in reference to create answer later.
            }
            evalLetters[j] = 0;
        }
    }

    // Build solution
    int k = 0;
    *returnSize = c;
    char** ans = malloc((c)*sizeof(char*));

    for (i = 0; i < 26; i++)
    {
        if (refLetters[i] > 0){
            ans[k] = malloc(2*sizeof(char));
            ans[k][0] = 'a' + i; // Retrieve letter
            ans[k][1] = '\0';
            k++;

            refLetters[i]--;
            i--;
        }
    }

    return ans;
}
