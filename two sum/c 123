/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* decompressRLElist(int* nums, int numsSize, int* returnSize) {
    // Calculate the total size required for the decompressed array
    int totalSize = 0;
    for (int i = 0; i < numsSize; i += 2) {
        totalSize += nums[i];
    }

    // Allocate memory for the decompressed array
    int* pDecompress = (int*)malloc(totalSize * sizeof(int));
    if (pDecompress == NULL) {
        // Handle memory allocation failure
        *returnSize = 0;
        return NULL;
    }

    int index = 0;
    for (int i = 0; i < numsSize; i += 2) {
        for (int j = 0; j < nums[i]; j++) {
            pDecompress[index++] = nums[i + 1];
        }
    }

    // Set the return size to the total number of elements in the decompressed array
    *returnSize = totalSize;
    return pDecompress;
}
